/*******************************************************************************
 * Copyright (c) 2020 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/

configurations {
    opensaml
}

dependencies {
    opensaml 'org.opensaml:opensaml-core:3.4.5', 
             'org.opensaml:opensaml-messaging-api:3.4.5'
             'org.opensaml:opensaml-messaging-impl:3.4.5'
             'org.opensaml:opensaml-profile-api:3.4.5'
             'org.opensaml:opensaml-saml-api:3.4.5'
             'org.opensaml:opensaml-saml-impl:3.4.5'
             'org.opensaml:opensaml-security-api:3.4.5'
             'org.opensaml:opensaml-security-impl:3.4.5'
             'org.opensaml:opensaml-soap-api:3.4.5'
             'org.opensaml:opensaml-soap-impl:3.4.5'
             'org.opensaml:opensaml-storage-api:3.4.5'
             'org.opensaml:opensaml-storage-impl:3.4.5'
}

task extractInjectedClasses(type: Copy) {
   from zipTree(configurations.opensaml[0])
   include "org/opensaml/core/config/Configuration.class"
   include "org/opensaml/saml2/binding/decoding/HTTPPostDecoder.class"
   into compileJava.destinationDir
}

compileJava.dependsOn extractInjectedClasses

task instrument {
  if (!parseBoolean(bnd('instrument.disabled', 'false'))) {
    inputs.files { rasInstrumentationInputFiles() }
    def instrument = fileTree(dir: compileJava.destinationDir, include: bnd('instrument.classesIncludes').split("\\s*,\\s*"), exclude: bnd('instrument.classesExcludes').split("\\s*,\\s*"))
    doLast {
      if (instrument.isEmpty())
        return
      rasInstrumentationTaskdef(ant)
      ant.instrumentForTrace(ffdc: bnd('instrument.ffdc'), taskInjection: bnd('instrument.taskInjection')) {
          fileset(dir: compileJava.destinationDir, includes: bnd('instrument.classesIncludes'), excludes: bnd('instrument.classesExcludes'))
      }
    }
  }
}

jar.dependsOn instrument
